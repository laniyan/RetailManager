


go to solution and add new project sql server database 
Add a folder inside db solution schema name dbo and publishLocations//this is where we have our publish scripts publish to 
Add 3 folders inside dbo folder caleed views, tables and stored proc
right click the db solution click publish so we can create a profile then edit and go to browse click local and select mssql local db then click ok that will create a connection string for us
then type our db name and click save profile as click the publishLocation folder and leave the default name then click save (tim corey vid 5 sql db project 7:35) then click publish this creates a db
can check the db in sql server object explorer

Add new wpf project to solution call it app name + WPF + GUI incase we add more GUI so that we know the diff
then right click properties and change assmebly name to the project name i.e retail manager so when the assembly builds the .exe will be called the project name and not app name + WPF + GUI 
then right click the WPF project and click set as start up project
Then get rid of lil black debugging box go to tool then click options then scroll to debugging click that and pick genarally then scroll to and unclick show runtime tool in app
add caliburn.micro to the WPF project in nuget packages
now add a folder sturcature 3 folders Models, ViewModels (They have to be spelt correct or it wont work I spelled ViewsModels and the caliburn couldnt find the structre)
and Views we are using the mvvm framework (Models views viewsModel) Views is wot we display to the end user model holds the data the view is 
going to display and viewModels passes it to the view model is not data acces we hold our data access in a separte lib we slipt our concerns 
then add a class in viewModel called ShellViewModel all viewModel classes end with viewModel 
Then add a wondow to the view folder right click it and go to add then click window and call it ShellView we will make this replace the default window that was created for us
then add a class to then WPF project and call it bootstrapper we uses this to set up caliburn.micro
Then go to app.xaml and remove startupUri=mainWindow the in app.Resources tag add resourceDic.mergedDic tag then inside that add resourceDic tag and inside that add local:Bootstrapper with key Bootstrapper
now we can delete then default window (MainWindow.xaml)

use caliburn to do denpendcy injection useing simple container we wiried this up in the bootstrapper class 

Add a table and called user to dbo,table folder and right click go down to table click add entered table name(user) then added IDENTITY to the id field
we create more rows AuthUserId data typenvarchar 128 becoz the entity framework user db id uses nvarchar 128 we dont want to touch there db (Tim Corey vid 9 sql db 9:50 )
we add mores and the once that are the same as enitiy we map the data type we added CreatedDate and set data type to datetmie2 that new one datetime is legacy and they couldnt remove it because of that
we set the default value to getutcdate()because that is easier to convert to local after designing the tables I went to publishLocations folder right clicked RMData.publish click publish then click publish again

we use caliburn to to make our shell view handle multiple views inheriting conductor 
then add a dockpanel tag and put the grid tag inside it allows us to dock things in diff postions inside then create a menu inside there with to items file and account
Then create a new view model called loginViewModel and then the login view in the view folder right click then add user control call it LoginView then change the background color 2 white
we brought down the DesignHeight from 450 to 425 so we can still see the file and account tab from the shell view
then we made the login view load when the shell view starts using ctor injection for the login view in the shell view class
Connect tHead login view model to the login view by inheriting Screen in loginViewModel class screen is from caliburn and we have acces to notify() now we have attach the code
behind the screen like featuure file code and winUI in app forms 

Wire the api to the login screen create a api heleper class in helpers folder created a auth api call() create a method to init a httpclient set the base url in app config 
by creating a appsettings tag and a add tad wit atrr key = api and value = go to project dataManager right click go to prop the click web and cop project uri and paste as value
add a ref to config file in the WPFGUI solution right click ref then click aadd ref then select assemblies and type in serach box system.config then tick that box not the
one with installed at the end then press ok then we get the value using configurationManger class, to get the ReadAsAsync<string>() to work for use to read the response of
the api we have to add Microsoft.AspNet.WebApi.Client from nuget 
create a model in model folder called AuthenticatedUser and create prop for what The token api returns 
create a Interface of the api helper then add it to bootsrapper class we only want one instance of the api helper so we add it to singleton, in loginviewmodel in login()
this is where we want to call the APIHelper() so when they press login it will call the api
set multiple apps to start on start go to solution right click go to prop go to start proj and click multiple start proj and select the ones you want to start 
    (rmdata, wpfgui) then click apply now both widows opens